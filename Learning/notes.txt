Variables are containers for storing data values.
The value of a variable can change throughout the program.

Declaring a variable is as simple as using the keyword var.
Which would look like this:

var x = 10;

But why write code that is never going to be executed. Isn’t that a waste of time?
Not at all! Comments are a good idea, especially ones relating to large functions,
as they help make our code more readable for others. So be kind, and comment!

What if we have more to say?

If we want to create a multi-line comment, we write it between /*and */
Like this:
/* this code creates an alert box */

Booleans

Not just fun to say, Booleans in JavaScript serve a useful function by
letting you have one of two values, either true or false.

So when you need a data type that can only have one of two possible values,
like Yes/No, on/off or true/false, look no further than Mr Boolean.

Increment ++
The increment operator increases the numeric value of its operand by 1. When placed
before the operand, it’ll return the incremented value. When placed after it,
it’ll return the original value and then increments the operand.

Decrement --
The decrement operator decreases the numeric value of its operand by 1.
When placed before the operand, it’ll return the decremented value. When placed
after the operand, it’ll return the original value and then decrements the operand.

Switch


But what if you need to test for multiple conditions?
In those cases, writing if else statements for each condition might not be
the best solution.

Instead, we can use the switch statement to perform different actions based
on different conditions.

Alert Box
An alert box is used when you want to ensure that
information gets through to the user.

Prompt Box
A prompt box is often used to have the user input a value before entering a page.
When a prompt box pops up, the user will have to click either OK or Cancel to proceed
after entering the input value.
If the user clicks OK, the box returns the input value. If the user clicks Cancel,
the box returns null.
The prompt() method takes two parameters.
- The first is the label, which you want to display in the text box.
- The second is a default string to display in the text box (optional).

Confirm Box
A confirm box is often used to have the user verify or accept something.
When a confirm box pops up, the user must click either OK or Cancel to proceed.
If the user clicks OK, the box returns true. If the user clicks Cancel, the Box
returns false.


OOP IN JS
Syntax of creating a class in JS


Working with DOM
Each element in the DOM has a set of properties and methods that provide information
about their relationships in the DOM:
element.childNodes returns an array of an element's child nodes.
element.firstChild returns the first child node of an element.
element.lastChild returns the last child node of an element.
element.hasChildNodes returns true if an element has any child nodes, otherwise false.
element.nextSibling returns the next node at the same tree level.
element.previousSibling returns the previous node at the same tree level.
element.parentNode returns the parent node of an element.

ES6 Map
A Map object can be used to hold key/value pairs. A key or value in a map can be anything
(objects and primitive values).
The syntax new Map([iterable]) creates a Map object where iterable is an array or any
other iterable object whose elements are arrays (with a key/value pair each).
An Object is similar to Map but there are important differences that make using a
Map preferable in certain cases:
1) The keys can be any type including functions, objects, and any primitive.
2) You can get the size of a Map.
3) You can directly iterate over Map.
4) Performance of the Map is better in scenarios involving frequent addition and removal
of key/value pairs.
The size property returns the number of key/value pairs in a map.

Methods
set(key, value) Adds a specified key/value pair to the map. If the specified key already exists,
value corresponding to it is replaced with the specified value.
get(key) Gets the value corresponding to a specified key in the map. If the specified key
doesn't exist, undefined is returned.
has(key) Returns true if a specified key exists in the map and false otherwise.
delete(key) Deletes the key/value pair with a specified key from the map and returns true.
Returns false if the element does not exist.
clear() Removes all key/value pairs from map.
keys() Returns an Iterator of keys in the map for each element.
values() Returns an Iterator of values in the map for each element.
entries() Returns an Iterator of array[key, value] in the map for each element.